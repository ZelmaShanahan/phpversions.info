#!/usr/bin/env php
<?php

$hostFilePath = __DIR__.'/../_data/hosts.yml';
$osFilePath   = __DIR__.'/../_data/operating_systems.yml';

require __DIR__.'/../vendor/autoload.php';

use Sturgeon\PHPArse\Parser;
use Symfony\Component\DomCrawler\Crawler;
use Symfony\Component\Yaml\Yaml;
use Naneau\SemVer\Parser as SemVerParser;

function readYamlFile($yamlFile)
{
  return YAML::parse(file_get_contents($yamlFile));
}

function saveYamlFile($yamlFile, $array)
{
  $newYaml = Yaml::dump($array, 4);
  file_put_contents($yamlFile, $newYaml);
}

function updateHostVersionArray($array) {
  foreach ($array as $hostKey => &$hostMeta) {
    foreach ($hostMeta['versions'] as $versionKey => &$versionMeta) {
      if (empty($versionMeta['phpinfo'])) {
        echo "Skipping {$hostMeta['name']} PHP {$versionKey}".PHP_EOL;
        continue;
      }

      echo "Parsing {$hostMeta['name']} PHP {$versionKey} from: {$versionMeta['phpinfo']}".PHP_EOL;

      try {
        $parser = Parser::readFromUrl($versionMeta['phpinfo']);
        $info = $parser->parse();

        $versionMeta['patch'] = $info->phpSemanticVersion()->getPatch();
        $versionMeta['semver'] = (string) $info->phpSemanticVersion();
        $versionMeta['version'] = $info->phpVersion();

        // Update this to show a successful scan happened
        $hostMeta['last_scanned_at'] = (new DateTime('now'))->format(DateTime::ISO8601);
      } catch (Exception $e) {
        echo "-- ERROR: Failed to parse {$hostMeta['name']}\n\n".$e->getMessage();
      }
    }
  }
  return $array;
}

function readDistroPackageVersion($url, $distro)
{
  switch ($distro) {
    case 'ubuntu':
    case 'debian':
      $xpath = '//*[@id="content"]/h1';
      $regex = '/\(([^\)]+)/';
    break;
    case 'centos':
      $xpath = '//a[starts-with(@href, "php-") and number(substring(@href, 5, 1))>0 and number(substring(@href, 5, 1))<=9]';
      $regex = '/php-(.+)\.src\.rpm$/';
    break;
    case 'arch':
      $xpath = '//div[@id="pkgdetails"]/h2';
      $regex = '/php ([0-9.-]+)$/';
    break;
  }

  try {
    $crawler = new Crawler(file_get_contents($url));
  } catch (InvalidArgumentException $e) {
    throw new Exception("Invalid HTML from {$url} for {$distro}");
  }
  $nodeValue = $crawler->filterXPath($xpath)->text();
  preg_match($regex, $nodeValue, $matches);
  if (empty($matches[1])) {
    throw new Exception("Looks like {$url} is shitty because can't read things for {$distro}");
  }
  return $matches[1];
}

function updateOperatingSystem($os)
{
  if (empty($os['package_url'])) {
    echo "Skipping {$os['name']}".PHP_EOL;
    return $os;
  }

  echo "Parsing {$os['name']} from: {$os['package_url']}".PHP_EOL;

  try {
    $version = readDistroPackageVersion($os['package_url'], $os['distro']);
  } catch (Exception $ex) {
    echo "- Failed to read {$os['name']}: ".$ex->getMessage().PHP_EOL;
    return $os;
  }

  if ($version === $os['version']) {
    echo "- No change for {$os['name']}, stil {$version}".PHP_EOL;
    return $os;
  }

  $newOs = $os;

  $noSuffix = (array) explode('-', $version);
  $noBuild = (array) explode('+', $noSuffix[0]);
  $semver = SemVerParser::parse($noBuild[0]);

  $newOs['patch'] = $semver->getPatch();
  $newOs['semver'] = (string) $semver;
  $newOs['version'] = $version;

  return $newOs;
}

echo "Updating hosts...".PHP_EOL;

$existingArray = readYamlFile($hostFilePath);
$updatedArray = updateHostVersionArray($existingArray);
saveYamlFile($hostFilePath, $updatedArray);

echo "Updating operating systems...".PHP_EOL.PHP_EOL;

$operatingSystems = readYamlFile($osFilePath);
saveYamlFile($osFilePath, array_map('updateOperatingSystem', $operatingSystems));
